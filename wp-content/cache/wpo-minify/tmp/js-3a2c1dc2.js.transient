{"request":{"hurl":"https:\/\/lindyhealth.com\/wp-content\/plugins\/wordfence\/js\/wfi18n.1647958122.js","inline":"","enable_minification":true,"type":"js","handle":"wfi18njs","version":"7.5.9"},"log":{"url":"\/wp-content\/plugins\/wordfence\/js\/wfi18n.1647958122.js","success":true},"code":"(function(){window.wfi18n={__:function(text){if(window.WordfenceI18nStrings&&text in window.WordfenceI18nStrings){return window.WordfenceI18nStrings[text]}\nreturn text}};if(typeof wp==='object'&&wp.i18n){window.wfi18n.sprintf=wp.i18n.sprintf;return}\nvar re={not_string:\/[^s]\/,not_bool:\/[^t]\/,not_type:\/[^T]\/,not_primitive:\/[^v]\/,number:\/[diefg]\/,numeric_arg:\/[bcdiefguxX]\/,json:\/[j]\/,not_json:\/[^j]\/,text:\/^[^\\x25]+\/,modulo:\/^\\x25{2}\/,placeholder:\/^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])\/,key:\/^([a-z_][a-z_\\d]*)\/i,key_access:\/^\\.([a-z_][a-z_\\d]*)\/i,index_access:\/^\\[(\\d+)\\]\/,sign:\/^[+-]\/};function sprintf(key){return sprintf_format(sprintf_parse(key),arguments)}\nfunction vsprintf(fmt,argv){return sprintf.apply(null,[fmt].concat(argv||[]))}\nfunction sprintf_format(parse_tree,argv){var cursor=1,tree_length=parse_tree.length,arg,output='',i,k,ph,pad,pad_character,pad_length,is_positive,sign\nfor(i=0;i<tree_length;i++){if(typeof parse_tree[i]==='string'){output+=parse_tree[i]}else if(typeof parse_tree[i]==='object'){ph=parse_tree[i]\nif(ph.keys){arg=argv[cursor]\nfor(k=0;k<ph.keys.length;k++){if(arg==undefined){throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"',ph.keys[k],ph.keys[k-1]))}\narg=arg[ph.keys[k]]}}else if(ph.param_no){arg=argv[ph.param_no]}else{arg=argv[cursor++]}\nif(re.not_type.test(ph.type)&&re.not_primitive.test(ph.type)&&arg instanceof Function){arg=arg()}\nif(re.numeric_arg.test(ph.type)&&(typeof arg!=='number'&&isNaN(arg))){throw new TypeError(sprintf('[sprintf] expecting number but found %T',arg))}\nif(re.number.test(ph.type)){is_positive=arg>=0}\nswitch(ph.type){case 'b':arg=parseInt(arg,10).toString(2)\nbreak\ncase 'c':arg=String.fromCharCode(parseInt(arg,10))\nbreak\ncase 'd':case 'i':arg=parseInt(arg,10)\nbreak\ncase 'j':arg=JSON.stringify(arg,null,ph.width?parseInt(ph.width):0)\nbreak\ncase 'e':arg=ph.precision?parseFloat(arg).toExponential(ph.precision):parseFloat(arg).toExponential()\nbreak\ncase 'f':arg=ph.precision?parseFloat(arg).toFixed(ph.precision):parseFloat(arg)\nbreak\ncase 'g':arg=ph.precision?String(Number(arg.toPrecision(ph.precision))):parseFloat(arg)\nbreak\ncase 'o':arg=(parseInt(arg,10)>>>0).toString(8)\nbreak\ncase 's':arg=String(arg)\narg=(ph.precision?arg.substring(0,ph.precision):arg)\nbreak\ncase 't':arg=String(!!arg)\narg=(ph.precision?arg.substring(0,ph.precision):arg)\nbreak\ncase 'T':arg=Object.prototype.toString.call(arg).slice(8,-1).toLowerCase()\narg=(ph.precision?arg.substring(0,ph.precision):arg)\nbreak\ncase 'u':arg=parseInt(arg,10)>>>0\nbreak\ncase 'v':arg=arg.valueOf()\narg=(ph.precision?arg.substring(0,ph.precision):arg)\nbreak\ncase 'x':arg=(parseInt(arg,10)>>>0).toString(16)\nbreak\ncase 'X':arg=(parseInt(arg,10)>>>0).toString(16).toUpperCase()\nbreak}\nif(re.json.test(ph.type)){output+=arg}else{if(re.number.test(ph.type)&&(!is_positive||ph.sign)){sign=is_positive?'+':'-'\narg=arg.toString().replace(re.sign,'')}else{sign=''}\npad_character=ph.pad_char?ph.pad_char==='0'?'0':ph.pad_char.charAt(1):' '\npad_length=ph.width-(sign+arg).length\npad=ph.width?(pad_length>0?pad_character.repeat(pad_length):''):''\noutput+=ph.align?sign+arg+pad:(pad_character==='0'?sign+pad+arg:pad+sign+arg)}}}\nreturn output}\nvar sprintf_cache=Object.create(null)\nfunction sprintf_parse(fmt){if(sprintf_cache[fmt]){return sprintf_cache[fmt]}\nvar _fmt=fmt,match,parse_tree=[],arg_names=0\nwhile(_fmt){if((match=re.text.exec(_fmt))!==null){parse_tree.push(match[0])}else if((match=re.modulo.exec(_fmt))!==null){parse_tree.push('%')}else if((match=re.placeholder.exec(_fmt))!==null){if(match[2]){arg_names|=1\nvar field_list=[],replacement_field=match[2],field_match=[]\nif((field_match=re.key.exec(replacement_field))!==null){field_list.push(field_match[1])\nwhile((replacement_field=replacement_field.substring(field_match[0].length))!==''){if((field_match=re.key_access.exec(replacement_field))!==null){field_list.push(field_match[1])}else if((field_match=re.index_access.exec(replacement_field))!==null){field_list.push(field_match[1])}else{throw new SyntaxError('[sprintf] failed to parse named argument key')}}}else{throw new SyntaxError('[sprintf] failed to parse named argument key')}\nmatch[2]=field_list}else{arg_names|=2}\nif(arg_names===3){throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')}\nparse_tree.push({placeholder:match[0],param_no:match[1],keys:match[2],sign:match[3],pad_char:match[4],align:match[5],width:match[6],precision:match[7],type:match[8]})}else{throw new SyntaxError('[sprintf] unexpected placeholder')}\n_fmt=_fmt.substring(match[0].length)}\nreturn sprintf_cache[fmt]=parse_tree}\nwindow.wfi18n.sprintf=sprintf})();\n","status":true}